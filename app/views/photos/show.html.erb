<div>
  <h1>Photo Details</h1>

  <dl>
    <dt>
      Image
    </dt>

    <dd>
      <%# --- THIS IS THE CORRECT WAY --- %>
      <%# 1. Check if an image is actually attached %>
      <%# if @the_photo.image.attached? %>
        <%# 2. ONLY if it's attached, create the <img> tag with its URL %>
      <%#= image_tag url_for(@the_photo.image), class: "img-responsive", width: 100, height: 100, style: "object-fit: cover;" %>
      <%# First, always check if the image is attached to avoid errors %>
      <% if @the_photo.image.attached? %>
        <p>Filename: <%= @the_photo.image.filename.to_s %></p>
        <%= image_tag @the_photo.image %>
      <% else %>
        <span>No image attached.</span>
      <% end %>


      <%# --- END OF CORRECT WAY --- %>
    </dd>

    <dt>
      Caption
    </dt>
    <dd>
      <%= @the_photo.caption %>
    </dd>

    <dt>
      Owner
    </dt>
    <dd>
      <%# Assuming @the_photo.owner association exists %>
      <%= @the_photo.owner.username %>
    </dd>

    <dt>
      Posted
    </dt>
    <dd>
      <%= time_ago_in_words(@the_photo.created_at) %> ago
    </dd>

    <dt>
      Likes count
    </dt>
    <dd>
      <%= @the_photo.likes_count %>
    </dd>

    <dt>
      Comments count
    </dt>
    <dd>
      <%= @the_photo.comments_count %>
    </dd>

    <dt>
      Fans
    </dt>
    <dd>
      <%# Assuming @the_photo.fans association exists, listing usernames %>
      <%= @the_photo.fans.map(&:username).to_sentence %>
    </dd>

    <dt>
      Add a fan
    </dt>

    <dd>
    <% if current_user.present? %>
      <%# Use the new helper method %>
      <% existing_like = current_user.find_like_for(@the_photo) %>

      <% if existing_like %>
          <%# --- UNLIKE: Test expects an <a> tag --- %>
          <%# Use link_to with data-turbo-method for DELETE if using Rails 7+ with Turbo %>
          <%= link_to "Unlike", 
                      like_path(existing_like), 
                      data: { turbo_method: :delete, turbo_confirm: "Are you sure?" }, 
                      class: "your-desired-classes-for-link" %>
          <%# If using older Rails with UJS, it would be: %>
          <%#= link_to "Unlike", like_path(existing_like), method: :delete, data: { confirm: "Are you sure?" }, class: "your-desired-classes-for-link" %>

        <% else %>
          <%# --- LIKE: Test expects a <button> tag --- %>
          <%# Use button_to, as it generates a form with a button for POST %>
          <%= button_to "Like", 
                        photo_likes_path(@the_photo), 
                        method: :post, 
                        class: "your-desired-classes-for-button" %>
        <% end %>



    <% else %>
      <p>Sign in to like this photo.</p>
    <% end %>
  </dd>


  <dd>
    <% if current_user == @the_photo.owner %>
      <h3>Edit photo</h3>
      <%# Use form_with for editing. It will automatically use PATCH and the correct URL %>
      <%= form_with(model: @the_photo, local: true) do |form| %>

        <%# Display validation errors, if any %>
        <% if @the_photo.errors.any? %>
          <div id="error_explanation" style="color: red;">
            <h4><%= pluralize(@the_photo.errors.count, "error") %> prohibited this photo from being saved:</h4>
            <ul>
              <% @the_photo.errors.full_messages.each do |message| %>
                <li><%= message %></li>
              <% end %>
            </ul>
          </div>
        <% end %>

        <%# Display current image if it exists %>
        <% if @the_photo.image.attached? %>
          <p>Current image:</p>
          <%= image_tag @the_photo.image, width: 100 %>
        <% end %>
        
        <div>
          <%= form.label :image, "Replace image (optional)" %>
          <%= form.file_field :image %>
          
        </div>

        <div>
          <%= form.label :caption %>
          <%= form.text_area :caption %> <%# text_area is often better for captions %>
        </div>

        <div>
          <%= form.button "Update photo" %>
          <%# Or use form.button "Update photo" if you prefer a <button> element %>
        </div>
      <% end %>

      <hr> <%# Separator %>

      <h3>Delete photo</h3>
      <%# Use button_to for delete actions, which handles the DELETE method correctly %>
      <%= link_to "Delete this photo", 
                    photo_path(@the_photo), 
                    method: :delete, 
                    data: { turbo_confirm: "Are you sure?" } %> 
    <% end %>
  </dd>
  </dl>
</div>

<hr>

<div>
  <h2>Comments</h2>
  <table border="1"> <%# Added border to match general table look %>
    <thead>
      <tr>
        <th>Commenter</th>
        <th>Comment</th>
        <th>Posted</th>
      </tr>
    </thead>
    <tbody>
      <%# Assuming @the_photo.comments association exists, and comments have .author %>
      <% @the_photo.comments.each do |a_comment| %>
        <tr>
          <td>
            <%= a_comment.author.username %>
          </td>
          <td>
            <%= a_comment.body %>
          </td>
          <td>
            <%= time_ago_in_words(a_comment.created_at) %> ago
          </td>
        </tr>
      <% end %>
    </tbody>
  </table>
</div>

<hr>

<div>
  <h3>Add a new comment</h3>
  <%# This form should point to your "create comment" action %>
  <form action="/photos/<%= @the_photo.id %>/comments" method="post">
    <input type="hidden" name="authenticity_token" value="<%= form_authenticity_token %>">
    <input type="hidden" name="query_author_id" value="<%= current_user.id %>">
    <input type="hidden" value="<%= @the_photo.id %>" name="query_photo_id">
    <div>
      <label for="browser_comment">Comment</label>
    </div>
    <div>
      <textarea id="browser_comment" name="query_body" placeholder="Enter a comment..."></textarea>
    </div>
    <button type=submit>Add comment</button>
  </form>
</div>
